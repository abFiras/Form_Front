// form.service.ts - Version corrig√©e pour √©viter les erreurs NaN
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import {
  FormDTO,
  FormCreateRequest,
  FormUpdateRequest,
  FormSubmissionRequest,
  FormSubmissionResponseDTO,
  ApiResponse,
  AssignGroupsRequest
} from '../models/form.models';

@Injectable({
  providedIn: 'root'
})
export class FormService {
  private readonly baseUrl = 'http://localhost:8080/api/forms';

  constructor(private http: HttpClient) {}

/**
 * Partage un formulaire vers la biblioth√®que
 */
/**
 * Mettre √† jour les attributs d'un champ
 */
updateFieldAttributes(fieldId: number, attributes: any): Observable<ApiResponse<string>> {
  return this.http.put<ApiResponse<string>>(`${this.baseUrl}/form-fields/${fieldId}/attributes`, {
    attributes: attributes
  }).pipe(
    catchError(error => {
      console.error('Erreur mise √† jour attributs champ:', error);
      return throwError(() => error);
    })
  );
}
shareFormToLibrary(formId: number, request: any): Observable<any> {
  return this.http.post(`${this.baseUrl}/${formId}/share-to-library`, request);
}
  downloadSubmissionAsWord(formId: number, submissionId: number): Observable<Blob> {
  const url = `${this.baseUrl}/${formId}/submissions/${submissionId}/download/word`;

  return this.http.get(url, {
    responseType: 'blob',
    headers: {
      'Accept': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    }
  }).pipe(
    catchError(error => {
      console.error('Erreur t√©l√©chargement Word soumission:', error);
      throw error;
    })
  );
}
  // ‚úÖ NOUVELLE M√âTHODE : T√©l√©charger formulaire en Word avec userId
downloadFormAsWord(formId: number, userId: number): Observable<Blob> {
  const url = `${this.baseUrl}/forms/${formId}/download/word?userId=${userId}`;

  return this.http.get(url, {
    responseType: 'blob',
    headers: {
      'Accept': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    }
  }).pipe(
    catchError(error => {
      console.error('Erreur t√©l√©chargement Word:', error);
      throw error;
    })
  );
}

  // ‚úÖ M√âTHODE UTILITAIRE : Valider les IDs
  private validateFormId(formId: number | string | undefined | null): number {
    if (formId === undefined || formId === null) {
      throw new Error('ID de formulaire manquant');
    }

    const numericId = Number(formId);

    if (isNaN(numericId) || numericId <= 0) {
      throw new Error(`ID de formulaire invalide: ${formId}`);
    }

    return numericId;
  }

  // ‚úÖ CR√âER UN FORMULAIRE
  createForm(request: FormCreateRequest): Observable<FormDTO> {
    return this.http.post<ApiResponse<FormDTO>>(`${this.baseUrl}`, request)
      .pipe(
        map(response => {
          console.log('Formulaire cr√©√© avec succ√®s:', response);
          return response.data;
        }),
        catchError(this.handleError)
      );
  }

  // ‚úÖ OBTENIR TOUS LES FORMULAIRES
  getAllForms(): Observable<FormDTO[]> {
    return this.http.get<ApiResponse<FormDTO[]>>(`${this.baseUrl}`)
      .pipe(
        map(response => response.data),
        catchError(this.handleError)
      );
  }

  // ‚úÖ OBTENIR LES FORMULAIRES PUBLI√âS
  getPublishedForms(): Observable<FormDTO[]> {
    return this.http.get<ApiResponse<FormDTO[]>>(`${this.baseUrl}/published`)
      .pipe(
        map(response => {
          console.log('Formulaires publi√©s r√©cup√©r√©s:', response.data.length);
          return response.data;
        }),
        catchError(this.handleError)
      );
  }

  // ‚úÖ OBTENIR UN FORMULAIRE POUR REMPLISSAGE - CORRECTION PRINCIPALE
  getFormForFilling(formId: number | string): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);
      console.log('R√©cup√©ration du formulaire pour remplissage, ID valid√©:', validatedId);

      return this.http.get<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}/fill`)
        .pipe(
          map(response => {
            console.log('Formulaire pour remplissage r√©cup√©r√©:', response.data);
            return response.data;
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ OBTENIR UN FORMULAIRE PAR ID
  getFormById(formId: number | string): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);
      console.log('R√©cup√©ration du formulaire par ID:', validatedId);

      return this.http.get<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}`)
        .pipe(
          map(response => response.data),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ METTRE √Ä JOUR UN FORMULAIRE
  updateForm(formId: number | string, request: FormUpdateRequest): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.put<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}`, request)
        .pipe(
          map(response => {
            console.log('Formulaire mis √† jour:', response);
            return response.data;
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ PUBLIER UN FORMULAIRE
  publishForm(formId: number | string): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.post<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}/publish`, {})
        .pipe(
          map(response => {
            console.log('Formulaire publi√©:', response);
            return response.data;
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ ASSIGNER DES GROUPES
  assignGroupsToForm(formId: number | string, groupIds: number[]): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);
      const request: AssignGroupsRequest = { groupIds };

      return this.http.post<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}/assign-groups`, request)
        .pipe(
          map(response => {
            console.log('Groupes assign√©s:', response);
            return response.data;
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ SOUMETTRE UN FORMULAIRE - CORRECTION PRINCIPALE
// Dans votre service Angular
submitForm(formId: number | string, submission: FormSubmissionRequest): Observable<FormSubmissionResponseDTO> {
  try {
    const validatedId = this.validateFormId(formId);

    // ‚úÖ LOG D√âTAILL√â des donn√©es envoy√©es
    console.log('üì§ Soumission du formulaire:', {
      formId: validatedId,
      dataKeys: Object.keys(submission.data),
      dataTypes: Object.entries(submission.data).map(([key, value]) => ({
        key,
        type: typeof value,
        hasValue: value !== null && value !== undefined
      }))
    });

    // ‚úÖ VALIDATION SUPPL√âMENTAIRE des donn√©es de soumission
    if (!submission || !submission.data || Object.keys(submission.data).length === 0) {
      throw new Error('Donn√©es de soumission manquantes ou vides');
    }

    return this.http.post<ApiResponse<FormSubmissionResponseDTO>>(`${this.baseUrl}/${validatedId}/submit`, submission)
      .pipe(
        map(response => {
          console.log('‚úÖ Formulaire soumis avec succ√®s:', response);
          return response.data;
        }),
        catchError(error => {
          console.error('‚ùå Erreur soumission:', error);
          return this.handleError(error);
        })
      );
  } catch (error) {
    return throwError(error instanceof Error ? error.message : String(error));
  }
}

  // ‚úÖ OBTENIR LES SOUMISSIONS
  getFormSubmissions(formId: number | string): Observable<FormSubmissionResponseDTO[]> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.get<ApiResponse<FormSubmissionResponseDTO[]>>(`${this.baseUrl}/${validatedId}/submissions`)
        .pipe(
          map(response => {
            console.log('Soumissions r√©cup√©r√©es:', response.data.length);
            return response.data;
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ SUPPRIMER UN FORMULAIRE
  deleteForm(formId: number | string): Observable<void> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.delete<ApiResponse<void>>(`${this.baseUrl}/${validatedId}`)
        .pipe(
          map(() => {
            console.log('Formulaire supprim√©:', validatedId);
          }),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ ENDPOINTS PUBLICS

  // ‚úÖ OBTENIR UN FORMULAIRE PUBLIC
  getPublicForm(formId: number | string): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.get<ApiResponse<FormDTO>>(`${this.baseUrl}/${validatedId}/public`)
        .pipe(
          map(response => response.data),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ SOUMISSION ANONYME
  submitFormAnonymous(formId: number | string, submission: FormSubmissionRequest): Observable<FormSubmissionResponseDTO> {
    try {
      const validatedId = this.validateFormId(formId);

      return this.http.post<ApiResponse<FormSubmissionResponseDTO>>(`${this.baseUrl}/${validatedId}/submit-anonymous`, submission)
        .pipe(
          map(response => response.data),
          catchError(this.handleError)
        );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  // ‚úÖ M√âTHODES UTILITAIRES

  getPublicFormUrl(formId: number | string): string {
    try {
      const validatedId = this.validateFormId(formId);
      return `${window.location.origin}/public/forms/${validatedId}`;
    } catch (error) {
      console.error('Erreur g√©n√©ration URL publique:', error);
      return '';
    }
  }

  getFormFillUrl(formId: number | string): string {
    try {
      const validatedId = this.validateFormId(formId);
      return `${window.location.origin}/forms/${validatedId}/fill`;
    } catch (error) {
      console.error('Erreur g√©n√©ration URL de remplissage:', error);
      return '';
    }
  }

  isFormAccessible(form: FormDTO): boolean {
    return form.isAccessible === true;
  }

  canEditForm(form: FormDTO): boolean {
    return form.canEdit === true;
  }

  getAssignedGroupNames(form: FormDTO): string[] {
    return form.assignedGroups?.map(group => group.name) || [];
  }

  getGroupAccessMessage(form: FormDTO): string {
    const groupNames = this.getAssignedGroupNames(form);
    if (groupNames.length === 0) {
      return 'Formulaire accessible √† tous';
    } else if (groupNames.length === 1) {
      return `Accessible au groupe : ${groupNames[0]}`;
    } else {
      return `Accessible aux groupes : ${groupNames.join(', ')}`;
    }
  }

  // ‚úÖ VALIDATION DES DONN√âES DE SOUMISSION
  validateSubmissionData(data: { [key: string]: any }): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!data || Object.keys(data).length === 0) {
      errors.push('Aucune donn√©e √† soumettre');
    }

    // V√©rifier les types de donn√©es
    Object.keys(data).forEach(key => {
      const value = data[key];

      // D√©tecter les valeurs NaN
      if (typeof value === 'number' && isNaN(value)) {
        errors.push(`Valeur num√©rique invalide pour le champ: ${key}`);
      }

      // D√©tecter les cha√Ænes "NaN"
      if (value === 'NaN' || value === 'undefined' || value === 'null') {
        errors.push(`Valeur invalide pour le champ: ${key} (${value})`);
      }
    });

    return {
      valid: errors.length === 0,
      errors
    };
  }

  // ‚úÖ PR√âPARER LES DONN√âES POUR SOUMISSION
  prepareSubmissionData(rawData: { [key: string]: any }): { [key: string]: any } {
    const cleanedData: { [key: string]: any } = {};

    Object.keys(rawData).forEach(key => {
      const value = rawData[key];

      // ‚úÖ FILTRAGE STRICT des valeurs invalides
      if (this.isValidValue(value)) {
        cleanedData[key] = value;
      } else {
        console.warn(`Valeur invalide ignor√©e pour le champ ${key}:`, value);
      }
    });

    // Ajouter des m√©tadonn√©es
    cleanedData['_submissionTimestamp'] = new Date().toISOString();
    cleanedData['_clientUrl'] = window.location.href;

    return cleanedData;
  }

  // ‚úÖ V√âRIFIER SI UNE VALEUR EST VALIDE
  private isValidValue(value: any): boolean {
    // Rejeter null, undefined
    if (value === null || value === undefined) {
      return false;
    }

    // Rejeter les cha√Ænes vides (sauf pour les cas sp√©ciaux)
    if (value === '') {
      return false;
    }

    // Rejeter les valeurs NaN
    if (typeof value === 'number' && isNaN(value)) {
      return false;
    }

    // Rejeter les cha√Ænes repr√©sentant des valeurs invalides
    if (typeof value === 'string') {
      const stringValue = value.toLowerCase().trim();
      if (['nan', 'undefined', 'null'].includes(stringValue)) {
        return false;
      }
    }

    // Rejeter les tableaux vides (pour multiselect)
    if (Array.isArray(value) && value.length === 0) {
      return false;
    }

    // Rejeter les objets vides
    if (typeof value === 'object' && !Array.isArray(value) && Object.keys(value).length === 0) {
      return false;
    }

    return true;
  }

  // ‚úÖ GESTION CENTRALIS√âE DES ERREURS
  private handleError = (error: any): Observable<never> => {
    let errorMessage = 'Une erreur inattendue s\'est produite';

    console.error('Erreur dans FormService:', error);

    if (error.error?.message) {
      errorMessage = error.error.message;
    } else if (error.message) {
      errorMessage = error.message;
    } else if (error.status) {
      switch (error.status) {
        case 401:
          errorMessage = 'Acc√®s non autoris√©. Veuillez vous reconnecter.';
          break;
        case 403:
          errorMessage = 'Acc√®s refus√©. Vous n\'avez pas les permissions n√©cessaires.';
          break;
        case 404:
          errorMessage = 'Formulaire non trouv√© ou non disponible.';
          break;
        case 422:
          errorMessage = 'Donn√©es invalides. V√©rifiez vos informations et r√©essayez.';
          break;
        case 500:
          errorMessage = 'Erreur serveur. Veuillez r√©essayer plus tard.';
          break;
        default:
          errorMessage = `Erreur ${error.status}: ${error.statusText}`;
      }
    }

    return throwError(errorMessage);
  };

  // ‚úÖ M√âTHODES DE CACHE OPTIONNELLES
  private formsCache = new Map<number, FormDTO>();
  private cacheExpiry = 5 * 60 * 1000; // 5 minutes

  getFormByIdCached(formId: number | string): Observable<FormDTO> {
    try {
      const validatedId = this.validateFormId(formId);
      const cached = this.formsCache.get(validatedId);

      if (cached && this.isCacheValid(cached)) {
        return new Observable(observer => {
          observer.next(cached);
          observer.complete();
        });
      }

      return this.getFormById(validatedId).pipe(
        map(form => {
          (form as any)._cacheTime = Date.now();
          this.formsCache.set(validatedId, form);
          return form;
        })
      );
    } catch (error) {
      return throwError(error instanceof Error ? error.message : String(error));
    }
  }

  private isCacheValid(cachedItem: any): boolean {
    if (!cachedItem._cacheTime) return false;
    return (Date.now() - cachedItem._cacheTime) < this.cacheExpiry;
  }

  clearCache(): void {
    this.formsCache.clear();
  }

  clearFormCache(formId: number | string): void {
    try {
      const validatedId = this.validateFormId(formId);
      this.formsCache.delete(validatedId);
    } catch (error) {
      console.error('Erreur lors du nettoyage du cache:', error);
    }
  }

  // ‚úÖ M√âTHODES DE D√âBOGAGE (√† utiliser temporairement)
  debugFormService(): void {
    console.log('√âtat du FormService:', {
      baseUrl: this.baseUrl,
      cacheSize: this.formsCache.size,
      cachedFormIds: Array.from(this.formsCache.keys())
    });
  }
}
